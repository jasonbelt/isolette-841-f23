package isolette.system_tests.rst

import isolette.system_tests.john1.SystemTestsJohn
import org.sireum._

// do not edit, auto-generated by p.Creator

class Example_Regulate_Subsystem_Inputs_Container_DSC_Test_Harness
  extends Regulate_Subsystem_Inputs_Container_DSC_Test_Harness {

  val profiles: Map[String, Regulate_Subsystem_Inputs_Container_Profile] = Map.empty ++ ISZ(
    "default" ~> Regulate_Subsystem_Inputs_Container_Profile.getDefaultProfile
  )

  val props: Map[String, (Any, Any) => B] = Map.empty


  override def next(): isolette.system_tests.rst.Regulate_Subsystem_Inputs_Container = {
    halt("FYTD")
  }

  override def test(o: isolette.system_tests.rst.Regulate_Subsystem_Inputs_Container): B = {
    val aProp = props.get("x").get
    val c = next()
    aProp(c, null)
    halt("FYTD")
  }


  override def string: String = toString

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
