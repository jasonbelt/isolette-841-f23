package isolette.system_tests.john1

import org.sireum._
import isolette._

// do not edit, auto-generated by p.Creator

trait SystemTestsJohn__Container_SlangCheck
  extends SystemTestSuite {

  case class NameProvider(name: String,
                          function: (Any, Any) => B)

  case class TestRow(testMethod: NameProvider,
                     profile: SystemTestsJohn__Container_Profile,
                     preStateCheck: (Any => B),
                     property: NameProvider)

  def next(profile: SystemTestsJohn__Container_Profile): Option[SystemTestsJohn__Container] = {
    return SystemTestsJohn__Container_Profile.nextH(profile)
  }

  def freshRandomLib: RandomLib = {
    return SystemTestsJohn__Container_Util.freshRandomLib
  }

  def getProfiles: MSZ[SystemTestsJohn__Container_Profile] = {
    return MSZ(getDefaultProfile)
  }

  //------------------------------------------------
  //  Test Vector Profiles
  //
  //   ..eventually auto-generated from a descriptor
  //     of injection vector
  //------------------------------------------------

  def getDefaultProfile: SystemTestsJohn__Container_Profile = {
    return SystemTestsJohn__Container_Profile.getDefaultProfile
  }

  def disableLogsAndGuis(): Unit = {

    // disable the various guis
    System.setProperty("java.awt.headless", "true")

    // suppress ART's log stream
    art.ArtNative_Ext.logStream = new java.io.PrintStream(new java.io.OutputStream {
      override def write(b: Int): Unit = {}
    })

    // suppress the static scheduler's log stream
    art.scheduling.static.StaticSchedulerIO_Ext.logStream = new java.io.PrintStream(new java.io.OutputStream {
      override def write(b: Int): Unit = {}
    })
  }
}
